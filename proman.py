from flask import Flask, render_template, jsonify, request
import json
from models import *

app = Flask(__name__)
app.config.from_object(__name__)


def db_to_json():
    list_of_boards = []
    for board in Board.select():
        list_of_boards.append({"id": board.id,
                               "title": board.title,
                               "color": board.color,
                               "listOfCards": []})
    for board in list_of_boards:
        for card in Card.select().where(Card.board == board["id"]):
            board["listOfCards"].append({"id": card.id,
                                         "title": card.title,
                                         "color": card.color,
                                         "board": card.board.id})
    return list_of_boards


def save_to_db(my_json, entity="board"):
    if entity == "board":
        Board.create(title=my_json["title"], color=my_json["color"])
    elif entity == "card":
        Card.create(title=my_json["title"], color=my_json["color"], board=my_json["owner"])


def update_db(my_json, entity="board"):
    if entity == "board":
        curr_board = my_json["board"]
        db_board = Board.get(Board.id == curr_board["id"])
        db_board.title = curr_board["title"]
        db_board.save()
        # Board.update(Board.title=curr_board["title"]).where(Board.id == curr_board["id"])
    elif entity == "card":
        curr_card = my_json["card"]
        db_card = Card.get(Card.id == curr_card["id"])
        db_card.title = curr_card["title"]
        db_card.save()
        # Card.update(Card.title=curr_card["title"]).where(Card.id == curr_card["id"])


# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    db.connect()
    if Board.table_exists() and Card.table_exists():
        pass
    else:
        db.create_table(Board, safe=True)
        db.create_table(Card, safe=True)


# This hook ensures that the connection is closed when we've finished
# processing the request.
@app.teardown_request
def _db_close(exc):
    if not db.is_closed():
        db.close()


@app.route('/')
def index():
    return render_template("index.html")


@app.route('/api/boards')
def board_level():
    list_of_boards = db_to_json()
    return json.dumps({"listOfBoards": list_of_boards})


@app.route('/api/<board_id>/cards/')
def card_level(board_id):
    list_of_cards = []
    for card in Card.select():
        if card.board.id == int(board_id):
            list_of_cards.append({"id": card.id,
                                  "title": card.title,
                                  "color": card.color})
    return json.dumps({'listOfCards': list_of_cards})


@app.route('/api/newboard', methods=["POST"])
def save_new_board():
    save_to_db(request.get_json()["jsonStr"])
    return 'ok'


@app.route('/api/newcard', methods=["POST"])
def save_new_card():
    save_to_db(request.get_json()["jsonStr"], "card")
    return 'ok'

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
